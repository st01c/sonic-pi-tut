

/
use_synth :fm

play :C3, amp: 1;
sleep 0.025;
play 75;
sleep 0.025;
play 79;
sleep 0.025;
/

/
#good multi-synth chord
use_synth :sine
play 50, release: 1.5;
sleep 0.25;
use_synth :fm
play 50, release: 1;
sleep 0.25;
use_synth :pretty_bell
play 62, release: 1;
sleep 0.25;
/

/
play 60, attack: 0.5, attack_level: 0.5, decay: 0.2, sustain: 1, sustain_level: 0.5, release: 0.5;
/

/
play sample :ambi_lunar_land;
play 36;
play 48, amp: 0.25;
play sample :ambi_glass_rub, amp: 0.25, dur: 0.25;
play sample :elec_blip
/


#play sample :loop_amen, attack: 0.75, release: 0.75, rate: 1;

#play sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1;

#play sample :loop_amen, rate: 1, attack: 0.01, sustain: 0, release: 0.35, finish: 0.75;

#play sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: 1;

#play rrand(50,100);

#random sound in a loop
/
loop do
  play rrand(50,100);
  sleep 0.5;
end
/

#randomization sample rate and pan
/
loop do
  sample :perc_bell, rate: rrand(0.125, 1.5), pan: rrand(-1,1);
  sleep rrand(0.2,2);
end
/

/
#randomization cutoff synth

use_synth :tb303

use_random_seed 40;
5.times do
  play 50, release: rrand(0,1.5), cutoff: rrand(60,120);
  sleep 0.125;
end
/

# lists: [60, 65, 72]
# choose

/
loop do
  play choose([60, 65, 72]);
  sleep 1;
end
/

# code blocks: do + end


/
3.times do
  play 50;
  sleep 0.5;
  sample :elec_plip;
  sleep 0.5;
  play 62;
end
/

/
loop do
  4.times do
    play 50;
    sleep 0.5;
  end

  8.times do
    play 55, release: 0.2;
    sleep 0.25;
  end
end
/

#nested iterations
/
loop do
  sample :drum_heavy_kick;
  #sleep 0.25;
  2.times do
    sample :elec_blip2, rate: rrand_i(0,4);
    sleep 0.25;
  end
  sample :elec_snare;
  4.times do
    sample :drum_tom_mid_soft, attack: 0, sustain: 0, release: 0.3;
    sleep 0.125;
  end
end
/

/
#simple randomization if loop
# plays a chord, different components played have different probability


use_synth :dsaw;

loop do
  play 50, amp: 0.3, release: 2;
  play 53, amp: 0.3, release: 2 if one_in(2);
  play 57, amp: 0.3, release: 2 if one_in(3);
  play 60, amp: 0.3, release: 2 if one_in(4);
  sleep 1;
end
/

/
#threads!!!
# will play up multiple loops simultaneously. each loop will have to have the 'in_thread do' (and 'end') operaters
# the following also has a simple if-probability thing built in for the

in_thread do
  loop do
    sample :drum_bass_soft;
    sleep 1;
  end
end

in_thread do
  loop do
    use_synth :beep
    play 50, release: 0.25 if one_in(2);
    sleep 0.25
    play 53, release: 0.25 if one_in(2);
    sleep 0.25
    play 57, release: 0.25 if one_in(4);
    sleep 0.25
    play 60, release: 0.25;
    sleep 0.25
  end
end

in_thread do
  loop do
    use_synth :zawa
    play 52, release: 2.5, phase: rrand_i(1,3), amp: 0.125;
    sleep 2;
  end
end

loop do
  use_synth :fm;
  play 50, release: 0.5;
  sleep 0.5;
end
/


/
# scope of threads and parameters inside and outside of in_thread do functions

play 50
sleep 1

in_thread do
  use_synth :tb303
  play 50, amp: 0.3;
end

sleep 1
play 50
/

/
# 'inheritance' within threads
# Notice how the second note is played with the :tb303 synth
# even though it was played from a separate thread?
# Any of the settings modified with the various use_* functions will behave in the same way.
# When threads are created, they inherit all the settings
# from their parent but they don’t share any changes back.

use_synth :tb303
play 50
sleep 1

in_thread do
  play 55
end
/

#naming threads
/
in_thread(name: :bass) do
  loop do
    use_synth :prophet
    play chord(:e2, :m7).choose, release: 0.6
    sleep 0.5
  end
end

in_thread(name: :drums) do
  loop do
    sleep 0.5
    sample :elec_snare
    sleep 0.5
  end
end
/

/
loop do
  play chord(:e3, :m7).choose
  sleep 1
end
/

/
# naming threads is a good idea because SP will only trigger ONE iteration
# (even if CMD-R hit mutiple times)

in_thread(name: :amen) do
  loop do
    sample :loop_amen
    sleep sample_duration :loop_amen
  end
end
/

# functions
/
define :foo do
  play 50
  sleep 1
  play 55
  sleep 2
end
/

# now even if the details of the function are deleted, SP 'remembers it'
/
play foo
sleep 1
2.times do
  foo
end
/

# teach functions to accept arguments…
/
define :my_player do |sound|
  play sound
end

my_player 80
sleep 0.75
my_player 82.5
sleep 0.75
/

/
use_synth :dsaw
define :chord_player do |chord, repeats|
  repeats.times do
    play chord(chord, :minor), release: 0.3
    sleep 0.5
  end
end

chord_player :e3, 2
sleep 0.5
chord_player :a3, 3
chord_player :g3, 4
sleep 0.5
chord_player :e3, 3
/

#SP crash… some code and exercises on variables missing

#print sample_duration(:loop_breakbeat)
#1.9047

sleeptime = sample_duration(:loop_breakbeat)

/
4.times do
  play sample(:loop_breakbeat)
  sleep sleeptime*1.5
end
/

# Q. why does the sleep command on samples start counting _right after the start of the
# previous sample rather than at its end?
# A.

# managing repetition in code with variable names
/
sn = :loop_garzul
zzz = sample_duration(sn)

3.times do
  sample sn, amp: 2
  sleep zzz
  sample sn, amp: 2, rate: -0.5, finish: 0.5
  sleep zzz
  sample sn, amp: 2
  sleep zzz
  sample sn, amp: 2, rate: 0.5, start: 0.5
  sleep zzz
end
/

/
# define simple synths as functions, then 'control' their parameters

s = play 60, release: 3
sleep 2
control s, note: 65

# weird --- the release time is not captured and-or passed on to the controlled s
/


# synchronizing threads
# 'cue' and 'sync'
# 'cue' sends timing messages
# other threads listen if primed with 'sync'

/~~~~~~~~~/

/
# first thread starts cue signal - in this case sent every second (sleep 1)
# follow-up threads have sync prompt built in

in_thread do
  loop do
    cue :tick
    sleep 1
  end
end

in_thread do
  loop do
    sync :tick
    sample :drum_heavy_kick
  end
end

in_thread do
  use_synth :dull_bell
  loop do
    sync :tick
    sleep 0.5
    play 60
  end
end
/

/~~~~~~~~~~~/

/
# test set-up that shows how the threads – even though started out of sync,
# are shifted into phase

in_thread do
  loop do
    cue :x
    sleep 1
  end
end

sleep(0.3)

in_thread do
  loop do
    sync :x
    sample :drum_bass_hard
  end
end
/

/
# randomization using cue names!
# only one cue is sent per round… whichever thread is synced to that one plays, the rest don't
# this could be more fun if you do something with timing!

in_thread do
  loop do
    cue [:foo, :bar, :baz].choose
    sleep 0.5
  end
end

in_thread do
  loop do
    sync :foo
    sample :elec_beep
  end
end

in_thread do
  loop do
    sync :bar
    sample :elec_flip
  end
end

in_thread do
  loop do
    sync :baz
    sample :elec_blup
  end
end
/

/~~~~~~~~~~~/
#FX
# Effects work inside code blocks [do-end]
# parameters can be passed into the code block to tweak the effect

/
in_thread(name: :one) do
  with_fx :echo, phase: 0.125, decay: 2 do
    play 60, amp: 2
    sleep 0.5
    sample :elec_plip
    sleep 0.5
    play 62
  end
end
/

/
with_fx :reverb do
  loop do
    play 60, release: 0.1
    sleep 0.125
  end
end
/


/~~~~~~~~~~~~~~/


# live controlling -- controlling running sounds (single synths, within single runs)
# this does not trigger 4 different synths, but modulates the first one!
# the 'release: 3' is necessary because it's the 1st synth all along, stretched til the end!

/
s = play 60, release: 3
sleep 0.5
control s, note: 65
sleep 0.5
control s, note: 67
sleep 3
control s, note: 72
/

/
# a parameter r is specified for the reverb effect
# as we go along it is tweaked ('mix' is a parameter of the effect, so it is gradually changed)

with_fx :reverb do |r|
play 60
sleep 0.5
control r, mix: 0.7
play 65
sleep 1
control r, mix: 0.9
sleep 1
play 68
end
/

# sliding parameters
/
s = play 60, release: 8, note_slide: 3
sleep 0.5
control s, note: 65
sleep 0.5
control s, note: 67
sleep 3
control s, note: 72
/

# sliding parameters in FX:
# initialize fx… pass an argument into it (phase), add slide command, declare parameter ||
# play a synth
# 
with_fx :wobble, phase: 1, phase_slide: 5 do |e|
use_synth :dsaw
play 60, release: 5
control e, phase: 0.025
end

